# swimming_club_bot.py
import streamlit as st
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
# Deshabilitar quantizaci√≥n en Windows
QUANTIZATION_AVAILABLE = False
from langchain_community.document_loaders import PyPDFLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
import os
import pickle
import json

@st.cache_resource
def load_llama_model():
    """Carga el modelo Llama con optimizaciones"""
    try:
        model_name = "meta-llama/Llama-3.2-3B-Instruct"
        
        # Cargar tokenizer
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        tokenizer.pad_token = tokenizer.eos_token
        
        # Configurar argumentos del modelo
        model_kwargs = {
            "device_map": "auto",
            "torch_dtype": torch.float16,
            "trust_remote_code": True
        }
        
        # Quantizaci√≥n deshabilitada para Windows
        
        # Cargar modelo
        model = AutoModelForCausalLM.from_pretrained(model_name, **model_kwargs)
        
        return model, tokenizer
    except Exception as e:
        st.error(f"Error cargando el modelo: {str(e)}")
        return None, None

@st.cache_resource
def setup_rag_system(pdf_folder="pdfs"):
    """Configura el sistema RAG con los PDFs del club"""
    try:
        # Embeddings en espa√±ol
        embeddings = HuggingFaceEmbeddings(
            model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
        )
        
        # Verificar si existe vectorstore guardado
        vectorstore_path = "club_vectorstore"
        if os.path.exists(f"{vectorstore_path}.faiss"):
            vectorstore = FAISS.load_local(vectorstore_path, embeddings, allow_dangerous_deserialization=True)
            return vectorstore, embeddings
        
        # Si no existe, crear nuevo vectorstore
        all_documents = []
        if os.path.exists(pdf_folder):
            for pdf_file in os.listdir(pdf_folder):
                if pdf_file.endswith('.pdf'):
                    try:
                        pdf_path = os.path.join(pdf_folder, pdf_file)
                        loader = PyPDFLoader(pdf_path)
                        documents = loader.load()
                        
                        for doc in documents:
                            doc.metadata.update({
                                "source": pdf_file,
                                "doc_type": identify_doc_type(pdf_file)
                            })
                        
                        all_documents.extend(documents)
                    except Exception as e:
                        st.warning(f"Error cargando {pdf_file}: {str(e)}")
                        continue
        
        if all_documents:
            # Dividir documentos en chunks
            text_splitter = RecursiveCharacterTextSplitter(
                chunk_size=1000,
                chunk_overlap=200,
                separators=["\n\n", "\n", ".", "!", "?", ",", " ", ""]
            )
            
            texts = text_splitter.split_documents(all_documents)
            vectorstore = FAISS.from_documents(texts, embeddings)
            
            # Guardar para uso futuro
            vectorstore.save_local(vectorstore_path)
        else:
            vectorstore = None
        
        return vectorstore, embeddings
    except Exception as e:
        st.error(f"Error configurando sistema RAG: {str(e)}")
        return None, None

def identify_doc_type(filename):
    """Identifica el tipo de documento"""
    filename_lower = filename.lower()
    if "reglamento" in filename_lower:
        return "reglamento"
    elif "inscripcion" in filename_lower:
        return "inscripcion"
    elif "precios" in filename_lower:
        return "precios"
    else:
        return "general"

class LlamaSwimmingBot:
    def __init__(self):
        self.model = None
        self.tokenizer = None
        self.vectorstore = None
        self.embeddings = None
        self.conversation_history = []
    
    def search_documents(self, query, k=2):
        """Busca en los documentos PDF"""
        if not self.vectorstore:
            return ""
        
        docs = self.vectorstore.similarity_search(query, k=k)
        context = ""
        for doc in docs:
            context += f"\n[{doc.metadata.get('doc_type', 'documento')}]: {doc.page_content}\n"
        
        return context
    
    def get_enrollment_flow(self, step=1):
        """Maneja el flujo de inscripci√≥n paso a paso"""
        enrollment_steps = {
            1: """‚úÖ **PERFECTO, ESTOS SON LOS PASOS PARA INSCRIBIRTE:**

1Ô∏è‚É£ **Actividad:** Ofrecemos clases de nataci√≥n en la piscina ol√≠mpica de la Villa Ol√≠mpica de Monter√≠a.
Es un deporte de bajo impacto, ideal para la salud.

2Ô∏è‚É£ **Requisitos:**
‚Ä¢ Aceptar t√©rminos y condiciones
‚Ä¢ Firmar consentimiento informado
‚Ä¢ Presentar certificado m√©dico, si es necesario

3Ô∏è‚É£ **Matr√≠cula:**
‚Ä¢ Tiene vigencia de 1 a√±o
‚Ä¢ Solo se paga una vez al a√±o
‚Ä¢ Importante: No se devuelve el valor pagado

4Ô∏è‚É£ **Mensualidad:**
‚Ä¢ Se paga por adelantado cada mes
‚Ä¢ Solo puedes asistir si est√°s al d√≠a en el pago
‚Ä¢ Tarifa pronto pago los primeros 5 dias del ciclo


üìÜ **¬øC√≥mo es la pol√≠tica de devoluciones?**
üü° Antes de la primera clase: 100%
üü† Despu√©s de la segunda clase: 50%
üî¥ Despu√©s de la tercera clase: No hay devoluci√≥n

5Ô∏è‚É£ **Pol√≠tica de reposici√≥n**
Puedes consultarla aqu√≠:
üìé https://bit.ly/32J20r0

6Ô∏è‚É£ **Importante sobre el uso de la piscina**
La piscina es p√∫blica. El aporte mensual garantiza instructores calificados, no es el alquiler del espacio.

7Ô∏è‚É£ **¬øQu√© riesgos debo tener en cuenta?**
‚Ä¢ Lesiones menores, ahogamiento, contacto con otros usuarios, clima
‚Ä¢ Declaras estar en condiciones √≥ptimas de salud
‚Ä¢ Si representas a un menor, tambi√©n asumes responsabilidad por √©l/ella

üì∏ **¬øSe toman fotos o videos?**
S√≠. Autorizas su uso con fines deportivos y promocionales del club al aceptar los t√©rminos.

‚úçÔ∏è **¬øDeseas continuar con tu inscripci√≥n?**

‚úÖ **S√≠, quiero inscribirme**
‚ùå **No, volver al inicio**
üì© **Contactar asesor humano para solicitar la documentaci√≥n**

üìû WhatsApp: +57 3144809367
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)"""
        }
        
        return enrollment_steps.get(step, "Paso no v√°lido")

    def get_fallback_response(self, user_input):
        """Respuesta de emergencia usando la informaci√≥n hardcodeada"""
        user_lower = user_input.lower()
        
        # Detectar solicitudes de inscripci√≥n
        if any(word in user_lower for word in ["inscripcion", "inscripci√≥n", "inscribirme", "matricula", "matr√≠cula", "registro", "pasos", "como me inscribo", "c√≥mo me inscribo"]):
            return self.get_enrollment_flow(1)
        
        if any(word in user_lower for word in ["horario", "hora", "cuando", "tiempo"]):
            if any(word in user_lower for word in ["ni√±o", "ni√±a", "menor", "infantil"]):
                return """üèä‚Äç‚ôÄÔ∏è **HORARIOS PARA NI√ëOS:**

**Martes y Jueves:**
‚Ä¢ 4:00 PM a 5:00 PM
‚Ä¢ 5:00 PM a 6:00 PM

**S√°bados:**
‚Ä¢ 8:00 AM a 9:00 AM
‚Ä¢ 4:00 PM a 5:00 PM
‚Ä¢ 5:00 PM a 6:00 PM

**Mi√©rcoles y Viernes:**
‚Ä¢ 4:00 PM a 5:00 PM
‚Ä¢ 5:00 PM a 6:00 PM

üìû Para m√°s informaci√≥n: +57 3144809367

üî• **¬°REALIZA TU INSCRIPCI√ìN YA!**
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)"""
            
            elif any(word in user_lower for word in ["adulto", "mayor"]):
                return """üèä‚Äç‚ôÇÔ∏è **HORARIOS PARA ADULTOS:**

**Martes y Jueves:**
‚Ä¢ 5:00 AM a 6:00 AM
‚Ä¢ 6:00 AM a 7:00 AM
‚Ä¢ 7:00 AM a 8:00 AM
‚Ä¢ 6:00 PM a 7:00 PM
‚Ä¢ 7:00 PM a 8:00 PM

**S√°bados:**
‚Ä¢ 5:00 AM a 6:00 AM
‚Ä¢ 6:00 AM a 7:00 AM
‚Ä¢ 7:00 AM a 8:00 AM

**Mi√©rcoles y Viernes:**
‚Ä¢ 6:00 PM a 7:00 PM

üìû Para m√°s informaci√≥n: +57 3144809367

üî• **¬°REALIZA TU INSCRIPCI√ìN YA!**
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)"""
            
            else:
                return """üìÖ **HORARIOS COMPLETOS - CLUB DE NATACI√ìN MNM:**

**MARTES Y JUEVES:**
‚Ä¢ 5:00-8:00 AM (adultos)
‚Ä¢ 4:00-6:00 PM (ni√±os)
‚Ä¢ 6:00-8:00 PM (adultos)

**S√ÅBADOS:**
‚Ä¢ 5:00-8:00 AM (adultos)
‚Ä¢ 8:00 AM-6:00 PM (ni√±os y adultos)

**MI√âRCOLES Y VIERNES:**
‚Ä¢ 4:00-6:00 PM (ni√±os)
‚Ä¢ 6:00-7:00 PM (adultos)

üìç Ubicaci√≥n: Piscina de la Villaol√≠mpica, Monter√≠a
üìû WhatsApp: +57 3144809367

üî• **¬°REALIZA TU INSCRIPCI√ìN YA!**
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)"""
        
        elif any(word in user_lower for word in ["precio", "costo", "valor", "cuanto", "pago"]):
            return """üí∞ **PRECIOS CLUB DE NATACI√ìN MNM:**

üèä‚Äç‚ôÄÔ∏è **MENSUALIDADES:**
1. 1Ô∏è‚É£  vez por semana: $120,000
2. 2Ô∏è‚É£  veces por semana: $160,000
3. 3Ô∏è‚É£  veces por semana: $180,000

üí° **Tarifa con descuento pronto pago:** Los primeros 5 d√≠as del ciclo

üìù **Inscripci√≥n:** $40,000 (pago √∫nico)

üìû WhatsApp: +57 3144809367

üî• **¬°REALIZA TU INSCRIPCI√ìN YA!**
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)"""
        
        elif any(word in user_lower for word in ["traer", "necesito", "llevar", "primera clase", "equipamiento"]):
            return """üéí **QU√â TRAER A TU PRIMERA CLASE:**

‚úÖ **Obligatorio:**
‚Ä¢ Traje de ba√±o deportivo
‚Ä¢ Gorro de nataci√≥n
‚Ä¢ Gafas de nataci√≥n
‚Ä¢ Toalla

‚úÖ **Opcional:**
‚Ä¢ Chanclas antideslizantes

üë∂ **Edades:** Desde 5 a√±os sin l√≠mite superior

üìû WhatsApp: +57 3144809367

üî• **¬°REALIZA TU INSCRIPCI√ìN YA!**
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)"""
        
        elif any(word in user_lower for word in ["enfasis", "√©nfasis", "enfoque", "que ense√±an", "metodologia", "metodolog√≠a", "escuela", "ense√±anza", "sistema", "niveles", "como ense√±an", "que aprendo", "qu√© aprendo"]):
            return """üéØ **√âNFASIS DE NUESTRA ESCUELA:**

1. üèä‚Äç‚ôÄÔ∏è Desarrollo de habilidades acu√°ticas
2. üèä‚Äç‚ôÇÔ∏è Ense√±anza de t√©cnicas en los 4 estilos de nataci√≥n
3. üìä Sistema de evaluaci√≥n progresivo por niveles (nivel basico, intermedio, avanzado y equipo)
4. üèÜ Programa de reconocimiento del Nadador del trimestre
5. üìà Evaluaci√≥n mensual del avance del nivel con puntaje que es enviado al grupo de Practicantes del Club
6. üí™ Entrenamiento para resistencia y velocidad
7. üë• Nataci√≥n para todas las edades
8. ü•á Preparaci√≥n para competencias
9. ‚ö° Fomento de disciplina y trabajo en equipo
10. üå± Promoci√≥n de estilo de vida saludable

üìû WhatsApp: +57 3144809367

üî• **¬°REALIZA TU INSCRIPCI√ìN YA!**
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)"""
        
        elif any(word in user_lower for word in ["edad", "a√±os", "ni√±o", "menor"]):
            return """üë∂ **EDADES ACEPTADAS:**

‚úÖ Desde 5 a√±os sin l√≠mite superior

üèä‚Äç‚ôÄÔ∏è Tenemos horarios especializados para ni√±os y adultos, en grupos segmentados para facilitar y promover el aprendizaje

üìû WhatsApp: +57 3144809367

üî• **¬°REALIZA TU INSCRIPCI√ìN YA!**
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)"""
        
        elif any(word in user_lower for word in ["contacto", "tel√©fono", "telefono", "whatsapp", "direccion", "direcci√≥n", "ubicacion", "ubicaci√≥n", "donde"]):
            return """üìç **INFORMACI√ìN DE CONTACTO:**

üèä‚Äç‚ôÄÔ∏è **Club de Nataci√≥n Monter√≠a Nataci√≥n Master**
üìç Direcci√≥n: Piscina de la Villaol√≠mpica, Monter√≠a
üìû Tel√©fono: +57 3144809367
üí¨ WhatsApp: +57 3144809367

¬°Te esperamos! üåä"""
        
        elif any(word in user_lower for word in ["reglamento", "reglas", "normas", "politicas", "pol√≠ticas", "terminos", "t√©rminos", "condiciones"]):
            return """üìã **INFORMACI√ìN SOBRE REGLAMENTOS:**

Para informaci√≥n detallada sobre:
‚Ä¢ Reglamentos del club
‚Ä¢ Pol√≠ticas de reposici√≥n
‚Ä¢ T√©rminos y condiciones
‚Ä¢ Normas de convivencia

üìû Por favor contacta directamente al club:
WhatsApp: +57 3144809367

Tenemos documentaci√≥n completa disponible."""
        
        elif any(word in user_lower for word in ["inscripcion", "inscripci√≥n", "matricula", "matr√≠cula", "registro"]):
            return """üìù **PROCESO DE INSCRIPCI√ìN:**

üí∞ **Costo de inscripci√≥n:** $40,000 (pago √∫nico)

üìã Para completar tu inscripci√≥n necesitas:
‚Ä¢ Documentaci√≥n personal
‚Ä¢ Informaci√≥n m√©dica b√°sica
‚Ä¢ Selecci√≥n de horarios

üìû Para iniciar el proceso contactanos:
WhatsApp: +57 3144809367

¬°Te ayudaremos con todo el proceso, Bienvenido! üèä‚Äç‚ôÄÔ∏è"""
        
        return None

    def generate_response(self, user_input):
        """Genera respuesta usando Llama + RAG con fallback"""
        # Primero intentar respuesta de fallback
        fallback = self.get_fallback_response(user_input)
        if fallback:
            return fallback
        
        if not self.model or not self.tokenizer:
            self.model, self.tokenizer = load_llama_model()
            if self.model is None or self.tokenizer is None:
                return "Lo siento, hay un problema con el sistema. Por favor contacta al personal del club."
        
        # Buscar contexto relevante
        document_context = self.search_documents(user_input)
        
        # Informaci√≥n base del club
        club_info = """
CLUB DE NATACION MONTERIA NATACI√ìN MASTER
- Direcci√≥n: Piscina de la Villaolimpica, Monteria
- Tel√©fono: +57 3144809367
- WhatsApp: +57 3144809367
- Edades: Desde 5 a√±os sin l√≠mite superior
- Horarios: Martes, Jueves: 5:00 AM a 6:00 AM (horario de adultos)
6:00 AM a 7:00 AM (horario de adultos)
7:00 AM a 8:00 AM (horario de adultos)
4:00 PM a 5:00 PM (horario de ni√±os)
5:00 PM a 6:00 PM (horario de ni√±os)
6:00 PM a 7:00 PM (horario de adultos)
7:00 PM a 8:00 PM (horario de adultos)
S√°bado: 5:00 AM a 6:00 AM (horario de adultos)
6:00 AM a 7:00 AM (horario de adultos)
7:00 AM a 8:00 AM (horario de adultos)
8:00 AM a 9:00 AM (horario de ni√±os)
4:00 PM a 5:00 PM (horario de ni√±os)
5:00 PM a 6:00 PM (horario de ni√±os)
Mi√©rcoles, Viernes: 4:00 PM a 5:00 PM (horario de ni√±os)
5:00 PM a 6:00 PM (horario de ni√±os)
6:00 PM a 7:00 PM (horario de adultos)

CU√ÅL ES EL ENFASIS DE LA ESCUELA:
- Desarrollo de habilidades acu√°ticas
- Ense√±anza de t√©cnicas de nataci√≥n en los cuatro estilos
- Sistema de evaluaci√≥n progresivo por niveles (inicial, intermedio, avanzado y equipo)
- Entrenamiento para mejorar resistencia y velocidad
- Ense√±anza de nataci√≥n para todas las edades
- Preparaci√≥n para competencias y eventos
- Fomento de la disciplina y el trabajo en equipo
- Promoci√≥n de un estilo de vida saludable

PRECIOS:
- $120,000 mensuales, una vez por semana (pronto pago los primeros 5 dias del ciclo)
- $160,000 mensuales, dos veces por semana (pronto pago los primeros 5 dias del ciclo)
- $180,000 mensuales, tres veces por semana (pronto pago los primeros 5 dias del ciclo)
- Inscripci√≥n: $40,000 (√∫nica vez)

QU√â TRAER PRIMERA CLASE:
- Traje de ba√±o deportivo, gorro, gafas de nataci√≥n
- Toalla y opcional chanclas antideslizantes
        """
        
        # Historial de conversaci√≥n
        conversation_context = "\n".join(self.conversation_history[-4:])
        
        # Crear prompt simplificado
        prompt = f"""<|begin_of_text|><|start_header_id|>system<|end_header_id|>
Eres un asistente del Club de Nataci√≥n Monteria. Responde usando SOLO esta informaci√≥n:

{club_info}

{document_context}

Reglas:
- Si la informaci√≥n est√° arriba, resp√≥ndela completa
- No digas "contacta al club" si tienes la respuesta
- Responde en espa√±ol, amigable y directo<|eot_id|>

<|start_header_id|>user<|end_header_id|>
{user_input}<|eot_id|>

<|start_header_id|>assistant<|end_header_id|>"""

        # Generar respuesta
        inputs = self.tokenizer(prompt, return_tensors="pt", truncation=True, max_length=3072)
        
        with torch.no_grad():
            outputs = self.model.generate(
                inputs.input_ids,
                max_new_tokens=200,
                temperature=0.1,
                do_sample=False,
                pad_token_id=self.tokenizer.eos_token_id,
                repetition_penalty=1.1,
                early_stopping=True,
                eos_token_id=self.tokenizer.eos_token_id
            )
        
        # Decodificar respuesta
        full_response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
        response = full_response.split("assistant<|end_header_id|>")[-1].strip()
        
        # Filtrar respuestas problem√°ticas y usar fallback si es necesario
        problematic_phrases = [
            "contacta al club", "contacta al personal", "comun√≠cate con", 
            "llama al club", "no tengo informaci√≥n", "no puedo proporcionar",
            "consulta directamente", "ponte en contacto"
        ]
        
        if any(phrase in response.lower() for phrase in problematic_phrases):
            fallback_response = self.get_fallback_response(user_input)
            if fallback_response:
                response = fallback_response
            else:
                response = f"""üèä‚Äç‚ôÄÔ∏è **Club de Nataci√≥n Monter√≠a Nataci√≥n Master**

Para informaci√≥n espec√≠fica sobre tu consulta:
üìû WhatsApp: +57 3144809367
üìç Piscina de la Villaol√≠mpica, Monter√≠a

üî• **¬°REALIZA TU INSCRIPCI√ìN YA!**
üëÜ [Haz clic aqu√≠ para inscribirte por WhatsApp](https://wa.me/573144809367?text=Hola,%20quiero%20inscribirme%20en%20el%20Club%20de%20Nataci√≥n%20MNM)

¬°Estaremos felices de ayudarte! üåä"""
        
        # Actualizar historial
        self.conversation_history.append(f"Usuario: {user_input}")
        self.conversation_history.append(f"Asistente: {response}")
        
        return response

# Aplicaci√≥n Streamlit
def main():
    st.set_page_config(
        page_title="A",
        page_icon="üèä‚Äç‚ôÄÔ∏è",
        layout="wide"
    )
    
    # CSS personalizado completo
    st.markdown("""
    <style>
    /* Configuraci√≥n general */
    .stApp {
        background-color: #ffffff;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    /* Header con logo */
    .header-container {
        background: linear-gradient(135deg, #1a3d70 0%, #134492 100%);
        padding: 20px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(26, 61, 112, 0.2);
        text-align: center;
    }
    
    .logo-space {
        width: 80px;
        height: 80px;
        background-color: #ffffff;
        border-radius: 50%;
        margin: 0 auto 15px auto;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 40px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    }
    
    .main-title {
        color: #ffffff !important;
        font-size: 28px;
        font-weight: bold;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    /* Contenedor principal */
    .main-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
    }
    
    /* Botones de consultas r√°pidas */
    .stButton > button {
        background: linear-gradient(135deg, #134492 0%, #1a3d70 100%);
        color: white !important;
        border: none;
        border-radius: 12px;
        padding: 12px 20px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 3px 8px rgba(19, 68, 146, 0.3);
        width: 100%;
        margin-bottom: 8px;
    }
    
    .stButton > button:hover {
        background: linear-gradient(135deg, #dede3c 0%, #1a3d70 100%);
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(222, 222, 60, 0.4);
    }
    
    /* Mensajes de chat */
    .chat-message {
        padding: 15px;
        border-radius: 15px;
        margin-bottom: 15px;
        display: flex;
        align-items: flex-start;
        animation: fadeIn 0.3s ease-in;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .user-message {
        background: linear-gradient(135deg, #dede3c 0%, #f5f5a3 100%);
        margin-left: 15%;
        color: #1a3d70 !important;
        font-weight: 600;
        text-shadow: none;
        box-shadow: 0 3px 10px rgba(222, 222, 60, 0.3);
        border: 2px solid #134492;
    }
    
    .bot-message {
        background: linear-gradient(135deg, #134492 0%, #1a3d70 100%);
        margin-right: 15%;
        color: white !important;
        box-shadow: 0 3px 10px rgba(19, 68, 146, 0.3);
        border: 2px solid #dede3c;
    }
    
    /* Input de texto */
    .stTextInput > div > div > input {
        border-radius: 25px;
        border: 2px solid #134492;
        padding: 12px 20px;
        background-color: #ffffff;
        color: #134492;
        font-size: 16px;
        transition: all 0.3s ease;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #1a3d70;
        box-shadow: 0 0 15px rgba(26, 61, 112, 0.3);
        outline: none;
    }
    
    /* Spinner personalizado */
    .stSpinner > div {
        border-top-color: #134492 !important;
    }
    
    /* Secci√≥n de consultas frecuentes */
    .frequent-queries {
        background: linear-gradient(rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.95)), url('img/RKDY1435.JPG') no-repeat bottom right;
        background-size: auto, 200px;
        padding: 20px;
        border-radius: 15px;
        margin: 20px 0;
        border: 3px solid #134492;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }
    
    /* T√≠tulo de secciones */
    .section-title {
        color: #000000 !important;
        background-color: rgba(255, 255, 255, 0.9);
        font-size: 24px;
        font-weight: 900;
        margin-bottom: 15px;
        text-align: center;
        padding: 8px 16px;
        border-radius: 8px;
        display: inline-block;
        width: 100%;
        box-sizing: border-box;
    }
    
    /* Scrollbar personalizada */
    ::-webkit-scrollbar {
        width: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #134492, #1a3d70);
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #134492, #1a3d70);
    }
    
    /* Efectos hover para elementos interactivos */
    .element-container:hover {
        transform: scale(1.02);
        transition: transform 0.2s ease;
    }
    
    /* Footer o informaci√≥n adicional */
    .info-footer {
        background: linear-gradient(135deg, #1a3d70 0%, #134492 100%);
        color: white;
        padding: 15px;
        border-radius: 12px;
        text-align: center;
        margin-top: 30px;
        box-shadow: 0 3px 10px rgba(26, 61, 112, 0.3);
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header personalizado con logo
    col_logo, col_title = st.columns([1, 4])
    
    with col_logo:
        try:
            st.image("logo/LOGO ORIGINAL.png", width=120)
        except:
            st.markdown("""
            <div class="logo-space">ü•Ω</div>
            """, unsafe_allow_html=True)
    
    with col_title:
        st.markdown("""
        <div class="header-container">
            <h1 class="main-title">SwimIA - Asistente Virtual del Club Monter√≠a Nataci√≥n Master (MNM)</h1>
        </div>
        """, unsafe_allow_html=True)
    
    # Mensaje de bienvenida
    st.markdown("""
    <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); 
                padding: 20px; 
                border-radius: 15px; 
                margin: 20px auto; 
                border-left: 5px solid #134492;
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
                max-width: 800px;
                text-align: center;">
        <h3 style="color: #134492; margin-bottom: 15px; font-weight: bold;">¬°Hola! Bienvenido al Club Monter√≠a Nataci√≥n Master</h3>
        <p style="color: #495057; font-size: 16px; margin: 0; line-height: 1.5;">
            Soy tu asistente virtual <strong>SwimIA</strong> y te ense√±ar√© todo sobre nuestro club y el proceso de inscripci√≥n. 
            <strong>¬øListo para sumergirte en tu proceso de aprendizaje o entrenamiento?</strong> üèä‚Äç‚ôÄÔ∏è
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar bot
    if "bot" not in st.session_state:
        with st.spinner("Inicializando sistema..."):
            st.session_state.bot = LlamaSwimmingBot()
            st.session_state.bot.vectorstore, st.session_state.bot.embeddings = setup_rag_system()
        st.success("‚úÖ Sistema listo!")
    
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Botones de consultas r√°pidas
    st.markdown("""
    <div class="frequent-queries">
        <div class="section-title" style="color: #000000 !important; background: rgba(255,255,255,0.9); padding: 10px; border-radius: 10px; font-weight: bold; font-size: 24px;">Consultas Frecuentes</div>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìÖ Horarios del club"):
            user_input = "¬øCu√°les son los horarios de funcionamiento?"
            process_message(user_input)
            
        if st.button("üìÖ Horarios del club para ni√±os"):
            user_input = "¬øCu√°les son los horarios de ni√±os?"
            process_message(user_input) 
            
        if st.button("üìÖ Horarios del club para adultos"):
            user_input = "¬øCu√°les son los horarios de adultos?"
            process_message(user_input)
            
        if st.button("üí∞ Precios por frecuencia semanal"):
            user_input = "¬øCu√°les son los precios del mes por frecuencia semanal?"
            process_message(user_input)
    
    with col2:
        if st.button("üéØ √ânfasis de nuestra Escuela de Nataci√≥n"):
            user_input = "¬øCu√°l es el √©nfasis de la Escuela de Nataci√≥n MNM?"
            process_message(user_input)
            
        if st.button("üìù Pasos para inscripci√≥n"):
            user_input = "¬øC√≥mo me inscribo?"
            process_message(user_input)
        
        if st.button("üèä‚Äç‚ôÇÔ∏è ¬øQu√© traer en la primera clase?"):
            user_input = "¬øQu√© debo traer a mi primera clase de nataci√≥n?"
            process_message(user_input)
        
        if st.button("üë∂ Edades aceptadas"):
            user_input = "¬øDesde qu√© edad aceptan ni√±os?"
            process_message(user_input)
    
    # Mostrar historial de chat
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Input del usuario
    if prompt := st.chat_input("Escribe tu pregunta aqu√≠..."):
        process_message(prompt)

def process_message(user_input):
    """Procesa un mensaje del usuario"""
    # Agregar mensaje del usuario al historial
    st.session_state.messages.append({"role": "user", "content": user_input})
    
    # Generar respuesta
    with st.spinner("Pensando..."):
        response = st.session_state.bot.generate_response(user_input)
    
    # Agregar respuesta al historial
    st.session_state.messages.append({"role": "assistant", "content": response})
    
    # Rerun para mostrar los nuevos mensajes
    st.rerun()

if __name__ == "__main__":
    main()